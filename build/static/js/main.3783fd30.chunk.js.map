{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","Button","backgroundColor","maxWidth","alignSelf","marginTop","color","fontWeight","ActivityIndicator","CircularProgress","App","_useState","useState","loading","headings","_useState2","Object","slicedToArray","state","setState","fetchHeadlines","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","prevState","objectSpread","fetch","sent","json","HNheadings","stop","apply","this","arguments","react_default","createElement","className","map","heading","i","key","length","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAIMA,EAAeC,YAAOC,IAAPD,CAAe,CAClCE,gBAAiB,UACjBC,SAAU,QACVC,UAAW,SACXC,UAAW,OACXC,MAAO,QACPC,WAAY,QAGRC,EAAoBR,YAAOS,IAAPT,CAAyB,CACjDM,MAAO,UACPF,UAAW,SACXC,UAAW,SA0DEK,MAtDf,WAAe,IAAAC,EACaC,mBAAS,CAACC,SAAS,EAAOC,SAAU,KADjDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACNO,EADMH,EAAA,GACCI,EADDJ,EAAA,GAGPK,EAAc,eAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAb,EAAA,OAAAS,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACrBZ,EAAS,SAAAa,GAAS,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAA,GAASgB,EAAT,CAAoBnB,SAAS,MAD1BgB,EAAAE,KAAA,EAEEG,MAAM,8BAFR,cAEfP,EAFeE,EAAAM,KAAAN,EAAAE,KAAA,EAGEJ,EAASS,OAHX,OAGftB,EAHee,EAAAM,KAMrBhB,EAAS,SAACa,GAAD,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAA,GAAkBgB,EAAlB,CAA6BlB,SAAUA,EAASuB,eACzDlB,EAAS,SAACa,GAAD,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAA,GAAkBgB,EAAlB,CAA6BnB,SAAS,MAP1B,wBAAAgB,EAAAS,SAAAZ,MAAH,yBAAAL,EAAAkB,MAAAC,KAAAC,YAAA,GAqBpB,OACEC,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OACbF,EAAAlB,EAAAmB,cAAA,SAAOC,UAAU,uBACfF,EAAAlB,EAAAmB,cAAA,aACED,EAAAlB,EAAAmB,cAAA,UACED,EAAAlB,EAAAmB,cAAA,wDAGJD,EAAAlB,EAAAmB,cAAA,aAjBGzB,EAAMJ,SAAS+B,IAAI,SAACC,EAASC,GAClC,OACEL,EAAAlB,EAAAmB,cAAA,MAAIK,IAAKD,GACPL,EAAAlB,EAAAmB,cAAA,UAAKG,QAoBP5B,EAAML,QACJ6B,EAAAlB,EAAAmB,cAACnC,EAAD,MACAU,EAAMJ,UAAsC,IAA1BI,EAAMJ,SAASmC,OAEjCP,EAAAlB,EAAAmB,cAAC5C,EAAD,CACE6C,UAAU,SACVM,QAAS9B,GAFX,wBAMC,OCxDS+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAlB,EAAAmB,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3783fd30.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {Button, styled, CircularProgress} from '@material-ui/core'\n\nconst StyledButton = styled(Button)({\n  backgroundColor: '#ff6501',\n  maxWidth: '400px',\n  alignSelf: 'center',\n  marginTop: '20vh',\n  color: 'white',\n  fontWeight: '600'\n})\n\nconst ActivityIndicator = styled(CircularProgress)({\n  color: '#ff6501',\n  alignSelf: 'center',\n  marginTop: '20vh'\n})\n\n\nfunction App() {\n  const [state, setState] = useState({loading: false, headings: []})\n  \n  const fetchHeadlines = async ()=>{\n    setState(prevState => ({...prevState, loading: true}))\n    const response = await fetch('http://165.227.192.56:3000')\n    const headings = await response.json()\n    //console.log(headings.HNheadings)\n    \n    setState((prevState)=>({...prevState, headings: headings.HNheadings}))\n    setState((prevState)=>({...prevState, loading: false}))\n  }\n\n  \n  const renderHeadLines = ()=>{\n    return state.headings.map((heading, i)=>{\n      return (\n        <tr key={i}>\n          <td>{heading}</td>\n        </tr>\n      )\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <table className='table table-striped'>\n        <thead>\n          <tr>\n            <th>These are the Hacker News headings today</th>\n          </tr>\n        </thead>\n        <tbody>\n          {renderHeadLines()}\n        </tbody>\n      </table>\n\n      {\n        state.loading\n        ? <ActivityIndicator/>\n        : state.headings && state.headings.length === 0 \n        ?(\n          <StyledButton \n            className='button'\n            onClick={fetchHeadlines}\n          >\n            Get latest headlines \n          </StyledButton>\n        ): null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}